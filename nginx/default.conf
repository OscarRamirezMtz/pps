upstream app_server {
    # Docker resolverá 'app' a la IP del contenedor de la aplicación Django
    server app:8000;
}

server {
    listen 80;
    listen [::]:80;
    server_name localhost servicios.uv www.servicios.uv; # ¡CAMBIA ESTO!

    # Redirigir todo el tráfico HTTP a HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name localhost servicios.uv www.servicios.uv; # ¡CAMBIA ESTO!

    # Rutas a tus certificados SSL (montados desde ./certs en el host)
    ssl_certificate /certificados/servicios.uv_crt.crt;       # ¡CAMBIA ESTO si tus nombres de archivo son diferentes!
    ssl_certificate_key /certificados/servicios.uv_key.pem;    # ¡CAMBIA ESTO!
    # ssl_protocols y otras configuraciones SSL de tu nginx.conf global se aplicarán

    # Servir archivos estáticos
    location /static/ {
        # Esta ruta debe coincidir con el segundo lado del montaje de volumen 'static_data
        # en el servicio nginx de docker-compose.yml y con STATIC_URL de Django.
        alias /var/www/staticfiles/;
        expires 1y; # Cachear estáticos por mucho tiempo
        access_log off;
        add_header Cache-Control "public";
    }

    # Opcional: Servir archivos media
    # location /media/ {
    #     alias /app/mediafiles/; # Debe coincidir con el volumen de media_data
    #     expires 1y;
    #     access_log off;
    #     add_header Cache-Control "public";
    # }

    # Pasar todas las demás solicitudes a la aplicación Django (Gunicorn)
    location / {
        proxy_pass http://app_server;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        proxy_redirect off;
        # proxy_buffering off; # Descomenta si tienes problemas con streaming o SSE
    }

    # (Opcional) Para WebSockets si tu app los usa
    # location /ws/ {
    #     proxy_pass http://app_server;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "upgrade";
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # }

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
}
